/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.playdeca.threads.app;

import com.playdeca.threads.counters.Counter;
import com.playdeca.threads.counters.Reader;
import com.playdeca.threads.counters.Writer;
import com.playdeca.threads.implementatios.Adder;
import com.playdeca.threads.implementatios.Atomic;
import com.playdeca.threads.implementatios.Dirty;
import com.playdeca.threads.implementatios.RWLock;
import com.playdeca.threads.implementatios.Synchronized;
import com.playdeca.threads.implementatios.Volatile;
import java.util.Objects;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;


/**
 *
 * @author alvaro@playdeca.com
 */
public class mainFrame extends javax.swing.JFrame {

    /**
     * Creates new form mainFrame
     */
    int Threads;
    int Rounds;
    long Target;
    
    public mainFrame() {
        initComponents();
        cargarComboBox();
    }
    
    
    
    private void cargarComboBox() {
        cb_ListaTipos.addItem("DIRTY");
        cb_ListaTipos.addItem("VOLATILE");
        cb_ListaTipos.addItem("SYNCHRONIZED");
        cb_ListaTipos.addItem("RWLOCK");
        cb_ListaTipos.addItem("ATOMIC");
        cb_ListaTipos.addItem("ADDER");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cb_ListaTipos = new javax.swing.JComboBox<>();
        btn_Start = new javax.swing.JButton();
        jSlider1 = new javax.swing.JSlider();
        jSlider2 = new javax.swing.JSlider();
        jSlider3 = new javax.swing.JSlider();
        lblThreads = new javax.swing.JLabel();
        lblRounds = new javax.swing.JLabel();
        lblTarget = new javax.swing.JLabel();
        txtThreads = new javax.swing.JTextField();
        txtRounds = new javax.swing.JTextField();
        txtTarget = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtResultados = new javax.swing.JTextArea();
        txtSeleccion = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Threads");
        setAlwaysOnTop(true);
        setLocation(new java.awt.Point(0, 0));
        setMinimumSize(new java.awt.Dimension(436, 480));
        setName("Threads"); // NOI18N
        setPreferredSize(new java.awt.Dimension(436, 480));
        setResizable(false);
        setSize(new java.awt.Dimension(436, 480));
        getContentPane().setLayout(null);

        cb_ListaTipos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_ListaTiposActionPerformed(evt);
            }
        });
        getContentPane().add(cb_ListaTipos);
        cb_ListaTipos.setBounds(30, 20, 270, 40);

        btn_Start.setText("GO");
        btn_Start.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_StartActionPerformed(evt);
            }
        });
        getContentPane().add(btn_Start);
        btn_Start.setBounds(320, 20, 70, 40);

        jSlider1.setMajorTickSpacing(10);
        jSlider1.setMinorTickSpacing(2);
        jSlider1.setPaintTicks(true);
        jSlider1.setValue(10);
        jSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider1StateChanged(evt);
            }
        });
        getContentPane().add(jSlider1);
        jSlider1.setBounds(90, 80, 220, 28);

        jSlider2.setMajorTickSpacing(10);
        jSlider2.setMinorTickSpacing(2);
        jSlider2.setPaintTicks(true);
        jSlider2.setValue(10);
        jSlider2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider2StateChanged(evt);
            }
        });
        getContentPane().add(jSlider2);
        jSlider2.setBounds(90, 110, 220, 28);

        jSlider3.setMajorTickSpacing(1000000);
        jSlider3.setMaximum(10000000);
        jSlider3.setMinimum(1);
        jSlider3.setMinorTickSpacing(500000);
        jSlider3.setPaintTicks(true);
        jSlider3.setValue(10);
        jSlider3.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider3StateChanged(evt);
            }
        });
        getContentPane().add(jSlider3);
        jSlider3.setBounds(90, 140, 220, 28);

        lblThreads.setText("Threads");
        getContentPane().add(lblThreads);
        lblThreads.setBounds(30, 80, 50, 16);

        lblRounds.setText("Rounds");
        getContentPane().add(lblRounds);
        lblRounds.setBounds(30, 110, 50, 16);

        lblTarget.setText("Target");
        getContentPane().add(lblTarget);
        lblTarget.setBounds(30, 140, 50, 16);

        txtThreads.setText("10");
        txtThreads.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtThreadsActionPerformed(evt);
            }
        });
        getContentPane().add(txtThreads);
        txtThreads.setBounds(320, 80, 70, 22);

        txtRounds.setText("10");
        txtRounds.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtRoundsActionPerformed(evt);
            }
        });
        getContentPane().add(txtRounds);
        txtRounds.setBounds(320, 110, 70, 22);

        txtTarget.setText("1000000");
        txtTarget.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTargetActionPerformed(evt);
            }
        });
        getContentPane().add(txtTarget);
        txtTarget.setBounds(320, 140, 70, 22);
        getContentPane().add(jSeparator1);
        jSeparator1.setBounds(0, 180, 420, 10);

        txtResultados.setColumns(20);
        txtResultados.setRows(5);
        txtResultados.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                txtResultadosPropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(txtResultados);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(30, 250, 360, 160);

        txtSeleccion.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        txtSeleccion.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getContentPane().add(txtSeleccion);
        txtSeleccion.setBounds(30, 200, 360, 30);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cb_ListaTiposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_ListaTiposActionPerformed

    }//GEN-LAST:event_cb_ListaTiposActionPerformed

    private void btn_StartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_StartActionPerformed
        txtResultados.setText("");
        String selectedItem = (String) this.cb_ListaTipos.getSelectedItem();
        Threads = Integer.parseInt(this.txtThreads.getText());
        Rounds = Integer.parseInt(this.txtRounds.getText());
        Target = Integer.parseInt(this.txtTarget.getText());
        Start(selectedItem);
    }//GEN-LAST:event_btn_StartActionPerformed

    private void jSlider1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider1StateChanged
        this.txtThreads.setText(String.valueOf(jSlider1.getValue()));
    }//GEN-LAST:event_jSlider1StateChanged
    

    private void txtThreadsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtThreadsActionPerformed
        // TODO add your handling code here:
        String text = txtThreads.getText();
        if (text != null) {
            if (!text.matches("[0-9]*")) {
                txtThreads.setText(" ");                
            }
        }
        this.jSlider1.setValue(Integer.parseInt(txtThreads.getText()));
        
    }//GEN-LAST:event_txtThreadsActionPerformed

    private void txtRoundsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtRoundsActionPerformed
        String text = txtRounds.getText();
        if (text != null) {
            if (!text.matches("[0-9]*")) {
                txtRounds.setText("");
            }
        }
        this.jSlider2.setValue(Integer.parseInt(txtRounds.getText()));
        
    }//GEN-LAST:event_txtRoundsActionPerformed

    private void txtTargetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTargetActionPerformed
        String text = txtTarget.getText();
        if (text != null) {
            if (!text.matches("[0-9]*")) {
                txtTarget.setText("");
            }
        }
    }//GEN-LAST:event_txtTargetActionPerformed

    private void jSlider2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider2StateChanged
        this.txtRounds.setText(String.valueOf(jSlider2.getValue()));
    }//GEN-LAST:event_jSlider2StateChanged

    private void jSlider3StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider3StateChanged
        this.txtTarget.setText(String.valueOf(jSlider3.getValue()));
    }//GEN-LAST:event_jSlider3StateChanged

    private void txtResultadosPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_txtResultadosPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_txtResultadosPropertyChange
    
    public void Start(String selectedItem) {
        Execute(selectedItem, Threads, Rounds, Target);
    }
    
    public static long TARGET_NUMBER = 100000000l;
    public static int THREADS = 10;
    public static int ROUNDS = 10;
    private static String COUNTER; //   Counters.RWLOCK.toString();

    private static ExecutorService es;
    private static int round;
    private static long start;

    private static Boolean[] rounds;

    private static enum Counters {
        DIRTY, //About 25s
        VOLATILE, //Super Slow 2:40
        SYNCHRONIZED, //42s
        RWLOCK, //26s +/- 2s
        ATOMIC, //50s
        ADDER //18s
    }
    
    public void Execute(String type, int Threads, int Rounds, long TargetNumber) {

        switch (type.toUpperCase()) {
            case "DIRTY":
                COUNTER = Counters.DIRTY.toString();
                break;
            case "VOLATILE":
                COUNTER = Counters.VOLATILE.toString();
                break;
            case "SYNCHRONIZED":
                COUNTER = Counters.SYNCHRONIZED.toString();
                break;
            case "RWLOCK":
                COUNTER = Counters.RWLOCK.toString();
                break;
            case "ATOMIC":
                COUNTER = Counters.ATOMIC.toString();
                break;
            case "ADDER":
                COUNTER = Counters.ADDER.toString();
                break;
            default:
                System.out.println("Error en tipo de implementacion");
                throw new AssertionError();
        }

        THREADS = Threads;

        ROUNDS = Rounds;

        TARGET_NUMBER = TargetNumber;

        rounds = new Boolean[ROUNDS];

        String Seleccion = ("Usando " + COUNTER 
                         + ". threads: " + THREADS + "."
                         + " rounds: " + ROUNDS
                         + ". Target: " + TARGET_NUMBER);
        
        txtSeleccion.setText(Seleccion);
        

        for (round = 0; round < ROUNDS; round++) {
            rounds[round] = Boolean.FALSE;

            Counter counter = getCounter();

            es = Executors.newFixedThreadPool(THREADS);

            start = System.currentTimeMillis();

            for (int j = 0; j < THREADS; j += 2) {
                es.execute(new Reader(counter));
                es.execute(new Writer(counter));
            }

            try {
                es.awaitTermination(10, TimeUnit.MINUTES);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }

    public static Counter getCounter() {
        Counters counterType = Counters.valueOf(COUNTER);

        switch (counterType) {
            case ADDER:
                return new Adder();
            case ATOMIC:
                return new Atomic();
            case DIRTY:
                return new Dirty();
            case RWLOCK:
                return new RWLock();
            case SYNCHRONIZED:
                return new Synchronized();
            case VOLATILE:
                return new Volatile();
        }
        return null;
    }
    
    
    
    public static void publish(long end) {
        synchronized (rounds[round]) {
            if (Objects.equals(rounds[round], Boolean.FALSE)) {
                
                String Tiempo;
                Tiempo = " Tiempo: " + (end - start) + " ms";
                txtResultados.append(Tiempo+'\n');
                
                rounds[round] = Boolean.TRUE;

                es.shutdownNow();
            }
        }
    }
    

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new mainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_Start;
    private javax.swing.JComboBox<String> cb_ListaTipos;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JSlider jSlider2;
    private javax.swing.JSlider jSlider3;
    private javax.swing.JLabel lblRounds;
    private javax.swing.JLabel lblTarget;
    private javax.swing.JLabel lblThreads;
    public static javax.swing.JTextArea txtResultados;
    private javax.swing.JTextField txtRounds;
    public static javax.swing.JLabel txtSeleccion;
    private javax.swing.JTextField txtTarget;
    private javax.swing.JTextField txtThreads;
    // End of variables declaration//GEN-END:variables
}
